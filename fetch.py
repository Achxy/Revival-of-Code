"""
Creates file strucutre and fills the data file

Example of created file structure:

Source
    - Data
        - __init__.py
        - day_1.txt
        - day_2.txt
        - ...
    - day_1.py
    - day_2.py
    - ...
"""
import asyncio
from functools import partial
from os import getenv
from pathlib import Path
from sys import platform

from aiohttp import ClientSession
from loguru import logger

INIT_CONTENTS = """\
# This file was automatically generated by fetch.py
from pathlib import Path


def __getattr__(name):
    with open(Path(__file__).parent / (name.lower() + ".txt"), "r") as file:
        return file.read().strip()
"""
PATH = Path(__file__).parent
DAYS = range(1, 26)
YEAR = 2015
ADVENT_URL = "https://adventofcode.com/2015/day/{day}/input"
OVERWRITE_DATA_FILES = False


def _create(*paths: Path, dir=True):
    fn = partial(Path.mkdir, exist_ok=True, parents=True) if dir else partial(Path.touch, exist_ok=True)
    for path in paths:
        fn(path)
        logger.success(f"Created or confirmed {path.name}")


def make_tree():
    _create(src := PATH / "src", data := src / "data")
    _create(init := data / "__init__.py", dir=False)
    with init.open("w") as f:
        f.write(INIT_CONTENTS)
    _create(*(src / f"day_{i}.py" for i in DAYS), *(data / f"day_{j}.txt" for j in DAYS), dir=False)


def _get_advent_cookies():
    advent_session = getenv("ADVENT_COOKIE") or getenv("ADVENT_SESSION")
    if advent_session is None:
        msg = "ADVENT_COOKIE or ADVENT_SESSION environment variable has not been set"
        raise EnvironmentError(msg)
    return {"session": advent_session.strip()}


async def write_data_to_file(session: ClientSession, cookies, path: Path, day: int):
    async with session.get(ADVENT_URL.format(day=day), cookies=cookies) as response:
        if not OVERWRITE_DATA_FILES and path.is_file():
            return logger.info(f"data file for day {day} already exists and has been ignored")
        with path.open("w", encoding="utf-8") as file:
            file.write(await response.text())
            logger.success(f"Wrote contents to data file for day {day}")


async def fill_data(session: ClientSession, days=DAYS):
    site, tasks = PATH / "src" / "data", []
    write = partial(write_data_to_file, session, _get_advent_cookies())
    for day in days:
        day_fmt = f"day_{day}.txt"
        tasks.append(write(site / day_fmt, day))
    await asyncio.gather(*tasks)


async def main():
    make_tree()
    async with ClientSession() as session:
        await fill_data(session=session)


if __name__ == "__main__":
    if platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
